BooleanAlgebra1:
    Formula
;

Formula:
    /*
    */
    AtomicVariableFormula | ConstantFormula | NegationFormula |
    UnaryOperatorFormula | BinaryOperatorFormula |
    SuperfluousParenthesisFormula
;

Keywords:
    TruthOperator | FalsumOperator | NegationOperator | ConjunctionOperator | DisjunctionOperator
;

ConstantFormula:
    o=TruthFormula | o=FalsumFormula
;

TruthFormula:
    TruthOperator
;

TruthOperator:
    '⊤' | '1' | 'true' | 'True' | 'TRUE' | 'truth' | 'Truth' | 'TRUTH'
;

FalsumFormula:
    FalsumOperator
;

FalsumOperator:
    '⊥' | '0' | 'false' | 'False' | 'FALSE' | 'falsum' | 'Falsum' | 'FALSUM'
;

UnaryOperatorFormula:
    NegationFormula
;

NegationFormula:
   o=NegationOperator arguments*=Formula
;

NegationOperator:
    '¬' | 'not' | 'Not' | 'NOT' | 'lnot' | 'Lnot' | 'LNot' | 'LNOT'
;

BinaryOperatorFormula:
    ConjunctionFormula | DisjunctionFormula
;

ConjunctionFormula:
    '(' arguments*=Formula o=ConjunctionOperator arguments*=Formula ')'
;

ConjunctionOperator:
    '∧' | 'and' | 'And' | 'AND' | 'land' | 'Land' | 'LAnd' | 'LAND'
;

DisjunctionFormula:
    '(' Formula o=DisjunctionOperator Formula ')'
;

DisjunctionOperator:
    '∨' | 'or' | 'Or' | 'OR' | 'lor' | 'Lor' | 'LOr' | 'LOR'
;

AtomicVariableFormula:
    /*
    This is a first approximation.
    It uses the textX Negative Lookahead operator "!" to prevent any ambiguity with formal keywords.
    This regular expression seems to be working fine in most circumstances but may not yield the expected result for all characters.
    Because this is the most ambiguous rule, I push it at the end of the .tx file to give precedence to all other rules.
    TODO: Correct bug: the variable name should not be allowed to start with digits.
    TODO: Consider replacing this RegExp with an exhaustive set of allowed characters for variable names.
    TODO: Decompose AtomicVariable in base_name and conditional indexes.
    References:
    - https://stackoverflow.com/questions/5555613/does-w-match-all-alphanumeric-characters-defined-in-the-unicode-standard
    */
    !Keywords
    v=/[\w]+/
;

SuperfluousParenthesisFormula:
    /*
    Rationale: getting rid of superfluous parenthesis in the formula.

    Superfluous parenthesis are removed with the textX Match Suppression operator "-".
    */
   '('- Formula ')'-
;
